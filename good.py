import streamlit as st
import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler
with open("customer_churn_model.pkl", "rb") as model_file:
    model = pickle.load(model_file)

with open("scaler.pkl", "rb") as scaler_file:
    scaler = pickle.load(scaler_file)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏û Background ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Frame ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
st.markdown(
    """
    <style>
    .main {
        background-image: url("https://img2.pic.in.th/pic/-67cfe8dc3204a029e.jpg");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        height: 100vh;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: -2;
    }
    .stApp {
        background-color: transparent !important;
    }
    </style>
    <div class="main"></div>
    <div class="frame-box"></div>
    """,
    unsafe_allow_html=True
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar
st.sidebar.title("üìå Navigation")
page = st.sidebar.radio("Go to", ["üîÆ Predict", "üìä Model Performance", "üî• Feature Importance"])

# ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
if page == "üîÆ Predict":
    st.title("üîç Customer Churn Prediction Web App")
    st.write("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    complain = st.selectbox("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", [0, 1])
    age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", min_value=18, max_value=100, value=30)
    is_active = st.selectbox("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Active Member ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", [0, 1])
    num_products = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", 1, 4, 1)
    geography = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", ["France", "Germany", "Spain"])
    balance = st.number_input("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", min_value=0.0, max_value=500000.0, value=50000.0)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    geo_map = {"France": 0, "Germany": 1, "Spain": 2}
    geography = geo_map[geography]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    input_df = pd.DataFrame([[complain, age, is_active, num_products, geography, balance]], 
                            columns=["Complain", "Age", "IsActiveMember", "NumOfProducts", "Geography", "Balance"])
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ StandardScaler
    input_data = scaler.transform(input_df)

    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"):
        prediction = model.predict(input_data)
        probability = model.predict_proba(input_data)[:, 1][0]
        
        if prediction[0] == 1:
            st.error(f"üö® ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ({probability:.2%} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô)")
        else:
            st.success(f"‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠ ({(1 - probability):.2%} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô)")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞ Confusion Matrix
elif page == "üìä Model Performance":
    st.title("üìä Model Performance")
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Confusion Matrix")

    # ‡∏Ñ‡πà‡∏≤ Accuracy ‡πÅ‡∏•‡∏∞ ROC AUC
    accuracy = 0.9990  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
    roc_auc = 0.9997
    st.metric(label="üîπ Accuracy", value=f"{accuracy:.4f}")
    st.metric(label="üîπ ROC AUC Score", value=f"{roc_auc:.4f}")
    
    # ‡πÅ‡∏™‡∏î‡∏á Confusion Matrix
    st.write("### Confusion Matrix")
    conf_matrix = np.array([[1606, 1], [1, 392]])  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    fig, ax = plt.subplots()
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=["Stay", "Churn"], yticklabels=["Stay", "Churn"])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    st.pyplot(fig)

# ‡∏´‡∏ô‡πâ‡∏≤ Feature Importance
elif page == "üî• Feature Importance":
    st.title("üî• Feature Importance")
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Feature ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
    
    # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤ Feature Importance
    feature_importance = {
        "Complain": 0.75,
        "Age": 0.10,
        "IsActiveMember": 0.05,
        "NumOfProducts": 0.04,
        "Geography": 0.03,
        "Balance": 0.03
    }
    
    fig, ax = plt.subplots()
    sns.barplot(x=list(feature_importance.values()), y=list(feature_importance.keys()), palette="coolwarm")
    plt.xlabel("Importance")
    plt.ylabel("Feature")
    st.pyplot(fig)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Footer
st.markdown(
    """
    <div class="footer">
        <p>¬© 2025 Customer Churn Prediction Web App | Developed by Your Name</p>
    </div>
    """,
    unsafe_allow_html=True
)